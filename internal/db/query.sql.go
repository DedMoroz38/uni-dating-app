// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCourse = `-- name: CreateCourse :one
INSERT INTO courses (
  name
) VALUES (
  $1
) RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreateCourse(ctx context.Context, name string) (Course, error) {
	row := q.db.QueryRow(ctx, createCourse, name)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createImage = `-- name: CreateImage :exec
INSERT INTO images (
    user_id,
    url
) VALUES (
    $1,
    $2
)
`

type CreateImageParams struct {
	UserID int32  `json:"user_id"`
	Url    string `json:"url"`
}

func (q *Queries) CreateImage(ctx context.Context, arg CreateImageParams) error {
	_, err := q.db.Exec(ctx, createImage, arg.UserID, arg.Url)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
  name, date_of_birth, course_id, email, password
) VALUES (
  $1, $2, $3, $4, $5
)
`

type CreateUserParams struct {
	Name        string      `json:"name"`
	DateOfBirth pgtype.Date `json:"date_of_birth"`
	CourseID    int32       `json:"course_id"`
	Email       string      `json:"email"`
	Password    string      `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.Name,
		arg.DateOfBirth,
		arg.CourseID,
		arg.Email,
		arg.Password,
	)
	return err
}

const createUserAndReturnID = `-- name: CreateUserAndReturnID :one
INSERT INTO users (
  name, date_of_birth, course_id, email, password
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id
`

type CreateUserAndReturnIDParams struct {
	Name        string      `json:"name"`
	DateOfBirth pgtype.Date `json:"date_of_birth"`
	CourseID    int32       `json:"course_id"`
	Email       string      `json:"email"`
	Password    string      `json:"password"`
}

func (q *Queries) CreateUserAndReturnID(ctx context.Context, arg CreateUserAndReturnIDParams) (int64, error) {
	row := q.db.QueryRow(ctx, createUserAndReturnID,
		arg.Name,
		arg.DateOfBirth,
		arg.CourseID,
		arg.Email,
		arg.Password,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getRandomUserWithImages = `-- name: GetRandomUserWithImages :one
SELECT
    u.id,
    u.name,
    u.email,
    u.date_of_birth,
    u.course_id,
    u.created_at,
    u.updated_at,
    COALESCE(
        (SELECT json_agg(json_build_object('url', i.url))
        FROM images i
        WHERE i.user_id = u.id),
        '[]'::json
    ) AS images
FROM
    users u
ORDER BY
    RANDOM()
LIMIT 1
`

type GetRandomUserWithImagesRow struct {
	ID          int64            `json:"id"`
	Name        string           `json:"name"`
	Email       string           `json:"email"`
	DateOfBirth pgtype.Date      `json:"date_of_birth"`
	CourseID    int32            `json:"course_id"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	UpdatedAt   pgtype.Timestamp `json:"updated_at"`
	Images      interface{}      `json:"images"`
}

func (q *Queries) GetRandomUserWithImages(ctx context.Context) (GetRandomUserWithImagesRow, error) {
	row := q.db.QueryRow(ctx, getRandomUserWithImages)
	var i GetRandomUserWithImagesRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.DateOfBirth,
		&i.CourseID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Images,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password, name, date_of_birth, course_id, created_at, updated_at FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Name,
		&i.DateOfBirth,
		&i.CourseID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, password, name, date_of_birth, course_id, created_at, updated_at FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Name,
		&i.DateOfBirth,
		&i.CourseID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const likeUser = `-- name: LikeUser :exec
INSERT INTO likes (user_id, n_of_likes)
VALUES ($1, 1)
ON CONFLICT (user_id) DO UPDATE
SET n_of_likes = likes.n_of_likes + 1
`

func (q *Queries) LikeUser(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, likeUser, userID)
	return err
}

const listCourses = `-- name: ListCourses :many
SELECT id, name FROM courses
ORDER BY name
`

type ListCoursesRow struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) ListCourses(ctx context.Context) ([]ListCoursesRow, error) {
	rows, err := q.db.Query(ctx, listCourses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListCoursesRow{}
	for rows.Next() {
		var i ListCoursesRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
